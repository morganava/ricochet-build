#!/bin/bash
[% c("var/set_default_env") -%]

VERSION=[% c("version") %]
ARCH=[% c("var/arch") %]

#
# Windows packaging
#
[% IF c("var/windows") %]

[% IF c("var/sign") %]
PKCS11_ENGINE="[% c('buildconf/signing/pkcs11_engine') %]"
PKCS11_MOULE="[% c('buildconf/signing/pkcs11_module') %]"
CERTS="[% c('buildconf/signing/certs') %]"
KEY="[% c('buildconf/signing/key') %]"
PASS="$(cat [% c('buildconf/signing/pass_file') %])"
TIMESTAMP_URL="[% c('buildconf/signing/timestamp_url') %]"

# sign binary in-place
sign_binary() {
    BINARY=$1
    osslsigncode -pkcs11engine ${PKCS11_ENGINE} -pkcs11module ${PKCS11_MOULE} -h sha256 -certs ${CERTS} -key ${KEY} -pass ${PASS} -t ${TIMESTAMP_URL} -in ${BINARY} -out ${BINARY}.signed
    mv ${BINARY}.signed ${BINARY}
}
[% ELSE %]
sign_binary() {
    # no-op
    BINARY=$1
    echo "not code-signing ${1}"
}
[% END %]

tar -C /var/tmp/dist -xf [% c('input_files_by_name/ricochet-refresh') %]
pushd /var/tmp/dist/ricochet-refresh
# sign each of our binaries
find . -type f -executable -print0 | while IFS= read -r -d '' bin; do sign_binary "$bin"; done
popd

tar -C /var/tmp/dist -xf [% c('input_files_by_name/nsis') %]
PATH=/var/tmp/dist/nsis/bin:$PATH

pushd /var/tmp/build
# build installer
cp -a /var/tmp/dist/ricochet-refresh/* .
cp $rootdir/windows/nsis/* .
makensis -DMUI_VERSION="${VERSION}" windows-installer.nsi
# sign installer
sign_binary ricochet-refresh-installer.exe
mv ricochet-refresh-installer.exe "$distdir/ricochet-refresh-${VERSION}-windows-${ARCH}-installer.exe"

# portable zip
cp -a /var/tmp/dist/ricochet-refresh ./Ricochet\ Refresh
rm ./Ricochet\ Refresh/LICENSE
zip -r "$distdir/ricochet-refresh-${VERSION}-windows-${ARCH}.zip" ./Ricochet\ Refresh
popd
[% END %]

#
# Linux packaging
#
[% IF c("var/linux") %]
tar -C /var/tmp/dist -xf [% c('input_files_by_name/ricochet-refresh') %]
pushd /var/tmp/build

#
# build deb
#
DEBARCH=[% c("var/deb_arch") %]

mkdir deb
pushd deb
cp -a $rootdir/linux/deb/debian .
mkdir -p debian/ricochet-refresh/opt

# copy in ricochet-refresh binaries
cp -a /var/tmp/dist/ricochet-refresh debian/ricochet-refresh/opt/ricochet_refresh

# generate icons
for size in 16 24 32 48 64 96 128 192 256 512 1024
do
    ICON_PATH="debian/ricochet-refresh/usr/share/icons/hicolor/${size}x${size}/apps"
    mkdir -p ${ICON_PATH}
    convert $rootdir/shared/icon-1024.png -resize ${size}x${size} ${ICON_PATH}/ricochet-refresh.png
done

# generate desktop file
EXECOMMAND=/opt/ricochet_refresh/ricochet-refresh
mkdir -p debian/ricochet-refresh/usr/share/applications/
cat > debian/ricochet-refresh/usr/share/applications/ricochet-refresh.desktop << EOF
[% INCLUDE "linux/ricochet-refresh.desktop.template" -%]
EOF

# generate debian control file
cat > debian/control << EOF
[% INCLUDE linux/deb/control.template -%]
EOF

# build .deb
dpkg-buildpackage -b --host-arch ${DEBARCH}
popd

mv ricochet-refresh_${VERSION}_${DEBARCH}.deb $distdir/.

popd # deb

#
# build appimage
#
APPIMAGEARCH=[% c("var/appimage_arch") %]
mkdir appimage
pushd appimage
linuxdeploy="$rootdir/[% c('input_files_by_name/linuxdeploy') %]"
chmod +x $linuxdeploy

mkdir -p AppDir/usr/bin
cp -a /var/tmp/dist/ricochet-refresh/* AppDir/usr/bin/.


# copy icon
ICON_ARGS=
for size in 16 32 64 128 192 256 512
do
    convert $rootdir/shared/icon-1024.png -resize ${size}x${size} ricochet-refresh-${size}.png
    ICON_ARGS="${ICON_ARGS} -i ricochet-refresh-${size}.png"
done


# generate desktop file
EXECOMMAND=ricochet-refresh
cat > ricochet-refresh.desktop << EOF
[% INCLUDE "linux/ricochet-refresh.desktop.template" -%]
EOF

# build .appimage
$linuxdeploy --appimage-extract-and-run -d ./ricochet-refresh.desktop  ${ICON_ARGS} --icon-filename=ricochet-refresh --output appimage --appdir AppDir

mv Ricochet-Refresh-*${APPIMAGEARCH}.AppImage $distdir/.

popd # appimage

#
# portable tar.gz
#
mv [% c('input_files_by_name/ricochet-refresh') %] $distdir/ricochet-refresh-${VERSION}-linux-${ARCH}.tar.gz
[% END %]

#
# macOS packaging
#
[% IF c("var/macos") %]

[% IF c("var/sign") %]
tar -C /var/tmp/dist -xf [% c('input_files_by_name/rcodesign') %]
PATH=/var/tmp/dist/rcodesign/bin:$PATH
P12_FILE="[% c('buildconf/signing/p12_file') %]"
P12_PASSWORD_FILE="[% c('buildconf/signing/p12_password_file') %]"
APP_STORE_CONNECT_API_KEY="[% c('buildconf/signing/app_store_connect_api_key') %]"

# sign binary in-place
sign_bundle() {
    BUNDLE=$1
    rcodesign sign --p12-file "${P12_FILE}" --p12-password-file "${P12_PASSWORD_FILE}" --code-signature-flags runtime "${BUNDLE}"
}
sign_dmg() {
    DMG=$1
    rcodesign sign --p12-file "${P12_FILE}" --p12-password-file "${P12_PASSWORD_FILE}" "${DMG}"
}
notarize_staple_dmg() {
    DMG=$1
    rcodesign notary-submit --api-key-path "${APP_STORE_CONNECT_API_KEY}" --staple "${DMG}"
}
[% ELSE %]
sign_bundle() {
    BUNDLE=$1
    echo "not signing ${BUNDLE}"
}
sign_dmg() {
    DMG=$1
    echo "not signing ${DMG}"
}
notarize_staple_dmg() {
    DMG=$1
    echo "not notarizing+stapling ${DMG}"
}
[% END %]

tar -C /var/tmp/dist -xf [% c('input_files_by_name/ricochet-refresh') %]
tar -C /var/tmp/dist -xf [% c('input_files_by_name/libdmg-hfsplus') %]
PATH="/var/tmp/dist/libdmg-hfsplus:$PATH"

pushd /var/tmp/build
    # build the dmg skeleton
    cp -r $rootdir/macos/dmg/. .

    # generate dmg background image
    convert $rootdir/macos/background.svg -resize 415x250 $rootdir/macos/background1x.png
    convert $rootdir/macos/background.svg -resize 830x500 $rootdir/macos/background2x.png
    convert $rootdir/macos/background1x.png $rootdir/macos/background2x.png .background/background.tiff

    # copy and sign app bundle
    cp -a /var/tmp/dist/ricochet-refresh/ricochet-refresh.app ./Ricochet\ Refresh.app
    sign_bundle ./Ricochet\ Refresh.app

    # generate and sign+notarize dmg
    genisoimage -V Ricochet\ Refresh -D -R -apple -no-pad -o ricochet-refresh-uncompressed.dmg .
    DMG="ricochet-refresh-${VERSION}-macos-${ARCH}.dmg"
    dmg dmg ricochet-refresh-uncompressed.dmg ${DMG}
    sign_dmg ${DMG}
    notarize_staple_dmg ${DMG}
    mv ${DMG} $distdir/.
popd
[% END %]


# make our output directory and copy outputs
mkdir -p [% dest_dir %]/[% c("filename") %]
cp -a $distdir/* [% dest_dir %]/[% c("filename") %]/.


