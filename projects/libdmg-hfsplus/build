#!/bin/bash
[% c("var/set_default_env") -%]

[% pc(c('var/build-toolchain'), 'var/setup', { build_toolchain_tarfile => c('input_files_by_name/build-toolchain') }) %]

tar -C /var/tmp/dist -xf [% c('input_files_by_name/openssl') %]
tar -C /var/tmp/dist -xf [% c('input_files_by_name/cmake') %]
export PATH=/var/tmp/dist/cmake/bin:$PATH
tar -C /var/tmp/dist -xf [% c('input_files_by_name/zlib') %]
tar -C /var/tmp/dist -xf [% c('input_files_by_name/bzip2') %]


tar -C /var/tmp/build -xf [% project %]-[% c('version') %].tar.gz
cd /var/tmp/build/[% project %]-[% c('version') %]

patch -p1 < "$rootdir/libdmg.patch"
patch -p1 < "$rootdir/hmac.patch"
patch -p1 < "$rootdir/cmake.patch"

CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=Release
                -DBUILD_STATIC=ON
                -DOPENSSL_USE_STATIC_LIBS=ON
                -DOPENSSL_ROOT_DIR=/var/tmp/dist/openssl
                -DZLIB_INCLUDE_DIR=/var/tmp/dist/zlib/include
                -DZLIB_LIBRARIES=/var/tmp/dist/zlib/lib
                -DBZIP2_INCLUDE_DIR=/var/tmp/dist/bzip2/include
                -DBZIP2_LIBRARIES=/var/tmp/dist/bzip2/lib"

cmake . -G "Unix Makefiles" ${CMAKE_FLAGS}
# make -j[% c("num_procs") %]
make SHELL='sh -x'

# We take only dmg and hfsplus like Mozilla does
cp dmg/dmg hfs/hfsplus $distdir/
cd /var/tmp/dist
[% c('tar', {
        tar_src => [ project ],
        tar_args => '-czf ' _ dest_dir _ '/' _ c('filename'),
    }) %]
